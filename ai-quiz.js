// AI Quiz Generator Module - Ho√†n to√†n ƒë·ªôc l·∫≠p, kh√¥ng c·∫ßn API
class AIQuizGenerator {
    constructor(quizManager) {
        this.quizManager = quizManager;
        this.initializeAIListeners();
    }

    initializeAIListeners() {
        // Paste AI content
        const pasteAIBtn = document.getElementById('paste-ai-content');
        if (pasteAIBtn) {
            pasteAIBtn.addEventListener('click', () => {
                this.quizManager.pasteFromClipboard('ai-content-input');
            });
        }

        // Generate AI quiz
        const generateBtn = document.getElementById('generate-ai-quiz');
        if (generateBtn) {
            generateBtn.addEventListener('click', () => {
                this.generateAIQuiz();
            });
        }

        // Clear AI input
        const clearAIBtn = document.getElementById('clear-ai-input');
        if (clearAIBtn) {
            clearAIBtn.addEventListener('click', () => {
                this.clearAIInputs();
            });
        }

        // Save AI quiz
        const saveAIBtn = document.getElementById('save-ai-quiz');
        if (saveAIBtn) {
            saveAIBtn.addEventListener('click', () => {
                this.saveAIQuiz();
            });
        }

        // Edit AI quiz
        const editAIBtn = document.getElementById('edit-ai-quiz');
        if (editAIBtn) {
            editAIBtn.addEventListener('click', () => {
                this.enableEditMode();
            });
        }

        // Cancel AI quiz
        const cancelAIBtn = document.getElementById('cancel-ai-quiz');
        if (cancelAIBtn) {
            cancelAIBtn.addEventListener('click', () => {
                this.cancelAIQuiz();
            });
        }
    }

    loadAISettings() {
        // No settings needed for standalone AI
    }

    clearAIInputs() {
        document.getElementById('ai-content-input').value = '';
        document.getElementById('ai-question-count').value = '10';
        this.quizManager.showToast('üóëÔ∏è ƒê√£ x√≥a n·ªôi dung', 'info');
    }

    async generateAIQuiz() {
        const content = document.getElementById('ai-content-input').value.trim();
        const questionCount = parseInt(document.getElementById('ai-question-count').value) || 10;

        // Validation
        if (!content) {
            this.quizManager.showToast('‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung b√†i h·ªçc!', 'error');
            return;
        }

        if (content.length < 100) {
            this.quizManager.showToast('‚ö†Ô∏è N·ªôi dung qu√° ng·∫Øn! Vui l√≤ng nh·∫≠p √≠t nh·∫•t 100 k√Ω t·ª±.', 'error');
            return;
        }

        // Show loading
        document.getElementById('ai-loading').style.display = 'block';
        document.getElementById('ai-preview').style.display = 'none';

        try {
            // Simulate processing time for better UX
            await new Promise(resolve => setTimeout(resolve, 1500));

            const questions = this.analyzeContentAndGenerateQuestions(content, questionCount);
            
            if (!questions || questions.length === 0) {
                throw new Error('Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi t·ª´ n·ªôi dung n√†y. Vui l√≤ng th·ª≠ v·ªõi n·ªôi dung kh√°c.');
            }

            this.quizManager.aiGeneratedQuiz = {
                questions: questions,
                totalQuestions: questions.length
            };

            this.displayAIPreview(questions);
            this.quizManager.showToast(`‚ú® AI ƒë√£ t·∫°o ${questions.length} c√¢u h·ªèi!`, 'success');

        } catch (error) {
            console.error('AI Error:', error);
            this.quizManager.showToast(`‚ùå L·ªói: ${error.message}`, 'error');
        } finally {
            document.getElementById('ai-loading').style.display = 'none';
        }
    }

    analyzeContentAndGenerateQuestions(content, maxQuestions) {
        // Ph√¢n t√≠ch n·ªôi dung v√† t·∫°o c√¢u h·ªèi
        const sentences = this.extractSentences(content);
        const keyPhrases = this.extractKeyPhrases(content);
        const questions = [];

        // T·∫°o c√¢u h·ªèi t·ª´ c√°c c√¢u quan tr·ªçng
        for (let i = 0; i < sentences.length && questions.length < maxQuestions; i++) {
            const sentence = sentences[i];
            
            // B·ªè qua c√¢u qu√° ng·∫Øn ho·∫∑c qu√° d√†i
            if (sentence.length < 20 || sentence.length > 200) continue;

            const question = this.generateQuestionFromSentence(sentence, keyPhrases, content);
            if (question) {
                questions.push(question);
            }
        }

        // N·∫øu kh√¥ng ƒë·ªß c√¢u h·ªèi, t·∫°o th√™m t·ª´ key phrases
        if (questions.length < maxQuestions) {
            const additionalQuestions = this.generateQuestionsFromKeyPhrases(keyPhrases, content, maxQuestions - questions.length);
            questions.push(...additionalQuestions);
        }

        return questions.slice(0, maxQuestions);
    }

    extractSentences(content) {
        // T√°ch c√¢u d·ª±a tr√™n d·∫•u c√¢u
        const sentences = content
            .split(/[.!?]+/)
            .map(s => s.trim())
            .filter(s => s.length > 0);

        // S·∫Øp x·∫øp theo ƒë·ªô quan tr·ªçng (c√¢u d√†i h∆°n th∆∞·ªùng ch·ª©a nhi·ªÅu th√¥ng tin h∆°n)
        return sentences.sort((a, b) => {
            const scoreA = this.calculateSentenceImportance(a);
            const scoreB = this.calculateSentenceImportance(b);
            return scoreB - scoreA;
        });
    }

    calculateSentenceImportance(sentence) {
        let score = 0;
        
        // C√¢u c√≥ t·ª´ kh√≥a quan tr·ªçng
        const importantWords = ['l√†', 'ƒë∆∞·ª£c', 'c√≥', 'bao g·ªìm', 'g·ªìm', 'nh∆∞', 'v√≠ d·ª•', 'nghƒ©a l√†', 't·ª©c l√†', 'ch√≠nh l√†'];
        importantWords.forEach(word => {
            if (sentence.toLowerCase().includes(word)) score += 2;
        });

        // C√¢u c√≥ s·ªë li·ªáu
        if (/\d+/.test(sentence)) score += 3;

        // ƒê·ªô d√†i h·ª£p l√Ω
        if (sentence.length >= 30 && sentence.length <= 150) score += 5;

        // C√≥ d·∫•u ph·∫©y (th∆∞·ªùng l√† c√¢u ph·ª©c, ch·ª©a nhi·ªÅu th√¥ng tin)
        score += (sentence.match(/,/g) || []).length;

        return score;
    }

    extractKeyPhrases(content) {
        // Tr√≠ch xu·∫•t c√°c c·ª•m t·ª´ quan tr·ªçng
        const words = content.toLowerCase().split(/\s+/);
        const phrases = [];
        const stopWords = ['l√†', 'c·ªßa', 'v√†', 'c√≥', 'ƒë∆∞·ª£c', 'trong', 'v·ªõi', 'ƒë·ªÉ', 'cho', 't·ª´', 'm·ªôt', 'c√°c', 'n√†y', 'ƒë√≥', 'nh·ªØng'];

        // T√¨m c√°c danh t·ª´ ri√™ng v√† thu·∫≠t ng·ªØ (ch·ªØ hoa)
        const capitalizedWords = content.match(/[A-Z√Ä√Å·∫†·∫¢√É√Ç·∫¶·∫§·∫¨·∫®·∫™ƒÇ·∫∞·∫Æ·∫∂·∫≤·∫¥√à√â·∫∏·∫∫·∫º√ä·ªÄ·∫æ·ªÜ·ªÇ·ªÑ√å√ç·ªä·ªàƒ®√í√ì·ªå·ªé√ï√î·ªí·ªê·ªò·ªî·ªñ∆†·ªú·ªö·ª¢·ªû·ª†√ô√ö·ª§·ª¶≈®∆Ø·ª™·ª®·ª∞·ª¨·ªÆ·ª≤√ù·ª¥·ª∂·ª∏ƒê][a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]+/g) || [];
        phrases.push(...capitalizedWords);

        // T√¨m c√°c c·ª•m t·ª´ 2-3 t·ª´ c√≥ √Ω nghƒ©a
        for (let i = 0; i < words.length - 1; i++) {
            if (!stopWords.includes(words[i]) && !stopWords.includes(words[i + 1])) {
                phrases.push(words[i] + ' ' + words[i + 1]);
            }
        }

        // Lo·∫°i b·ªè tr√πng l·∫∑p v√† s·∫Øp x·∫øp theo t·∫ßn su·∫•t
        const phraseCount = {};
        phrases.forEach(phrase => {
            phraseCount[phrase] = (phraseCount[phrase] || 0) + 1;
        });

        return Object.keys(phraseCount)
            .sort((a, b) => phraseCount[b] - phraseCount[a])
            .slice(0, 20);
    }

    generateQuestionFromSentence(sentence, keyPhrases, fullContent) {
        // T√¨m t·ª´ kh√≥a ch√≠nh trong c√¢u
        const mainKeyword = this.findMainKeyword(sentence, keyPhrases);
        if (!mainKeyword) return null;

        // T·∫°o c√¢u h·ªèi b·∫±ng c√°ch thay th·∫ø t·ª´ kh√≥a
        const questionTypes = [
            () => this.createWhatIsQuestion(sentence, mainKeyword),
            () => this.createDefinitionQuestion(sentence, mainKeyword),
            () => this.createWhichQuestion(sentence, mainKeyword),
            () => this.createHowManyQuestion(sentence, mainKeyword)
        ];

        // Ch·ªçn ng·∫´u nhi√™n m·ªôt lo·∫°i c√¢u h·ªèi
        const questionType = questionTypes[Math.floor(Math.random() * questionTypes.length)];
        return questionType();
    }

    findMainKeyword(sentence, keyPhrases) {
        // T√¨m key phrase xu·∫•t hi·ªán trong c√¢u
        for (const phrase of keyPhrases) {
            if (sentence.toLowerCase().includes(phrase.toLowerCase())) {
                return phrase;
            }
        }
        return null;
    }

    createWhatIsQuestion(sentence, keyword) {
        // T·∫°o c√¢u h·ªèi d·∫°ng "... l√† g√¨?"
        const cleanSentence = sentence.replace(/[.!?]+$/, '');
        
        // T√¨m ƒë·ªãnh nghƒ©a trong c√¢u
        const match = cleanSentence.match(/(.+?)\s+(l√†|ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l√†|nghƒ©a l√†)\s+(.+)/i);
        
        if (match) {
            const subject = match[1].trim();
            const definition = match[3].trim();
            
            return {
                question: `${subject} l√† g√¨?`,
                options: this.generateOptions(definition, 'definition'),
                correctAnswer: 'A'
            };
        }

        // Fallback: t·∫°o c√¢u h·ªèi chung
        return {
            question: `Theo n·ªôi dung, ${keyword} c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?`,
            options: this.generateOptions(cleanSentence, 'general'),
            correctAnswer: 'A'
        };
    }

    createDefinitionQuestion(sentence, keyword) {
        const cleanSentence = sentence.replace(/[.!?]+$/, '');
        
        return {
            question: `Kh√°i ni·ªám n√†o sau ƒë√¢y ƒë√∫ng v·ªÅ ${keyword}?`,
            options: this.generateOptions(cleanSentence, 'definition'),
            correctAnswer: 'A'
        };
    }

    createWhichQuestion(sentence, keyword) {
        const cleanSentence = sentence.replace(/[.!?]+$/, '');
        
        return {
            question: `ƒêi·ªÅu n√†o sau ƒë√¢y ƒë√∫ng v·ªÅ ${keyword}?`,
            options: this.generateOptions(cleanSentence, 'statement'),
            correctAnswer: 'A'
        };
    }

    createHowManyQuestion(sentence, keyword) {
        // T√¨m s·ªë trong c√¢u
        const numbers = sentence.match(/\d+/g);
        
        if (numbers && numbers.length > 0) {
            const number = numbers[0];
            const cleanSentence = sentence.replace(/[.!?]+$/, '');
            
            return {
                question: `C√≥ bao nhi√™u ${keyword} ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p?`,
                options: this.generateNumericOptions(number),
                correctAnswer: 'A'
            };
        }

        return this.createWhatIsQuestion(sentence, keyword);
    }

    generateOptions(correctAnswer, type) {
        const options = [
            { letter: 'A', text: correctAnswer }
        ];

        // T·∫°o c√°c ƒë√°p √°n sai h·ª£p l√Ω
        const wrongAnswers = this.generateWrongAnswers(correctAnswer, type);
        
        wrongAnswers.forEach((answer, index) => {
            options.push({
                letter: String.fromCharCode(66 + index), // B, C, D
                text: answer
            });
        });

        return options;
    }

    generateWrongAnswers(correctAnswer, type) {
        const wrongAnswers = [];
        
        // T·∫°o ƒë√°p √°n sai b·∫±ng c√°ch thay ƒë·ªïi m·ªôt ph·∫ßn c·ªßa ƒë√°p √°n ƒë√∫ng
        const words = correctAnswer.split(' ');
        
        if (words.length > 3) {
            // ƒê·∫£o ng∆∞·ª£c m·ªôt ph·∫ßn
            const reversed = [...words];
            const mid = Math.floor(words.length / 2);
            [reversed[0], reversed[mid]] = [reversed[mid], reversed[0]];
            wrongAnswers.push(reversed.join(' '));

            // Thay ƒë·ªïi t·ª´ quan tr·ªçng
            const modified1 = [...words];
            modified1[Math.floor(words.length / 3)] = 'kh√¥ng';
            wrongAnswers.push(modified1.join(' '));

            // Th√™m ph·ªß ƒë·ªãnh
            wrongAnswers.push('Kh√¥ng ' + correctAnswer.toLowerCase());
        } else {
            // V·ªõi c√¢u ng·∫Øn, t·∫°o ƒë√°p √°n ƒë·ªëi l·∫≠p
            wrongAnswers.push('Kh√¥ng ph·∫£i ' + correctAnswer.toLowerCase());
            wrongAnswers.push('Ng∆∞·ª£c l·∫°i v·ªõi ' + correctAnswer.toLowerCase());
            wrongAnswers.push('Kh√°c v·ªõi ' + correctAnswer.toLowerCase());
        }

        return wrongAnswers.slice(0, 3);
    }

    generateNumericOptions(correctNumber) {
        const num = parseInt(correctNumber);
        const options = [
            { letter: 'A', text: correctNumber }
        ];

        // T·∫°o c√°c s·ªë g·∫ßn ƒë√∫ng
        const wrongNumbers = [
            num - 1,
            num + 1,
            num * 2
        ].filter(n => n > 0);

        wrongNumbers.forEach((n, index) => {
            options.push({
                letter: String.fromCharCode(66 + index),
                text: n.toString()
            });
        });

        return options;
    }

    generateQuestionsFromKeyPhrases(keyPhrases, content, count) {
        const questions = [];
        
        for (let i = 0; i < keyPhrases.length && questions.length < count; i++) {
            const phrase = keyPhrases[i];
            
            // T√¨m c√¢u ch·ª©a key phrase
            const sentences = content.split(/[.!?]+/);
            const relevantSentence = sentences.find(s => 
                s.toLowerCase().includes(phrase.toLowerCase()) && s.length > 20
            );

            if (relevantSentence) {
                const question = {
                    question: `Theo n·ªôi dung, ${phrase} c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?`,
                    options: this.generateOptions(relevantSentence.trim(), 'general'),
                    correctAnswer: 'A'
                };
                questions.push(question);
            }
        }

        return questions;
    }

    displayAIPreview(questions) {
        const previewContent = document.getElementById('ai-quiz-preview-content');
        const questionTotal = document.getElementById('ai-question-total');
        
        questionTotal.textContent = questions.length;

        const questionsHTML = questions.map((q, index) => `
            <div class="preview-question" data-index="${index}">
                <div class="preview-question-header">
                    <div class="preview-question-number">${index + 1}</div>
                    <div class="preview-question-text" contenteditable="false">${q.question}</div>
                </div>
                <div class="preview-options">
                    ${q.options.map(opt => `
                        <div class="preview-option ${opt.letter === q.correctAnswer ? 'correct' : ''}" data-letter="${opt.letter}">
                            <span class="preview-option-letter">${opt.letter}.</span>
                            <span class="preview-option-text" contenteditable="false">${opt.text}</span>
                        </div>
                    `).join('')}
                </div>
                <div class="preview-correct-answer">
                    <i class="fas fa-check-circle"></i>
                    ƒê√°p √°n ƒë√∫ng: ${q.correctAnswer}
                </div>
            </div>
        `).join('');

        previewContent.innerHTML = questionsHTML;
        
        document.getElementById('ai-preview').style.display = 'block';
        document.getElementById('ai-preview').scrollIntoView({ behavior: 'smooth' });
    }

    enableEditMode() {
        const questions = document.querySelectorAll('.preview-question');
        questions.forEach(q => {
            q.classList.add('editable');
            const questionText = q.querySelector('.preview-question-text');
            const optionTexts = q.querySelectorAll('.preview-option-text');
            
            questionText.contentEditable = 'true';
            optionTexts.forEach(opt => {
                opt.contentEditable = 'true';
            });

            // Add click handler for correct answer selection
            const options = q.querySelectorAll('.preview-option');
            options.forEach(opt => {
                opt.style.cursor = 'pointer';
                opt.addEventListener('click', () => {
                    options.forEach(o => o.classList.remove('correct'));
                    opt.classList.add('correct');
                    
                    const letter = opt.dataset.letter;
                    const correctAnswerDiv = q.querySelector('.preview-correct-answer');
                    correctAnswerDiv.innerHTML = `
                        <i class="fas fa-check-circle"></i>
                        ƒê√°p √°n ƒë√∫ng: ${letter}
                    `;
                });
            });
        });

        this.quizManager.showToast('‚úèÔ∏è Ch·∫ø ƒë·ªô ch·ªânh s·ª≠a ƒë√£ b·∫≠t. Click v√†o ƒë√°p √°n ƒë·ªÉ ch·ªçn ƒë√°p √°n ƒë√∫ng.', 'info');
    }

    saveAIQuiz() {
        const quizName = document.getElementById('ai-quiz-name').value.trim();
        
        if (!quizName) {
            this.quizManager.showToast('‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n cho quiz!', 'error');
            return;
        }

        // Collect edited questions
        const questions = [];
        const questionElements = document.querySelectorAll('.preview-question');
        
        questionElements.forEach((qEl, index) => {
            const questionText = qEl.querySelector('.preview-question-text').textContent.trim();
            const options = [];
            let correctAnswer = '';

            qEl.querySelectorAll('.preview-option').forEach(optEl => {
                const letter = optEl.dataset.letter;
                const text = optEl.querySelector('.preview-option-text').textContent.trim();
                
                options.push({ letter, text });
                
                if (optEl.classList.contains('correct')) {
                    correctAnswer = letter;
                }
            });

            questions.push({
                question: questionText,
                options: options,
                correctAnswer: correctAnswer
            });
        });

        // Create quiz object
        const quiz = {
            id: Date.now().toString(),
            title: quizName,
            description: 'Quiz ƒë∆∞·ª£c t·∫°o b·ªüi AI t·ª± ƒë·ªông',
            questions: questions,
            createdAt: new Date().toISOString(),
            totalQuestions: questions.length
        };

        // Save to quizzes
        this.quizManager.quizzes.push(quiz);
        this.quizManager.saveQuizzes();
        this.quizManager.loadQuizList();
        this.quizManager.updateQuizSelector();

        // Clear and switch tab
        this.cancelAIQuiz();
        this.quizManager.switchTab('manage');
        
        this.quizManager.showToast(`üéâ ƒê√£ l∆∞u quiz "${quizName}" v·ªõi ${questions.length} c√¢u h·ªèi!`, 'success');
    }

    cancelAIQuiz() {
        document.getElementById('ai-preview').style.display = 'none';
        document.getElementById('ai-quiz-name').value = '';
        this.quizManager.aiGeneratedQuiz = null;
    }
}

// Initialize AI Generator when QuizManager is ready
if (typeof QuizManager !== 'undefined') {
    QuizManager.prototype.loadAISettings = function() {
        if (!this.aiGenerator) {
            this.aiGenerator = new AIQuizGenerator(this);
            this.aiGenerator.loadAISettings();
        }
    };
}
